# Weekend Data Course - Leaflet Course ----
# This project is just working through this guys tutorial from his website
library(tidyverse)
library(magrittr)
library(rlang)
library(leaflet)
library(ggmap)
library(htmltools)
library(mapview)
library(htmlwidgets)
library(shiny)
library(shinydashboard)
# Weekend Data Course - Leaflet Course ----
# This project is just working through this guys tutorial from his website
library(tidyverse)
installed.packages()
# Weekend Data Course - Leaflet Course ----
# This project is just working through this guys tutorial from his website
library("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(shinydashboard)
library(shinydashboard)
library(rgdal)
library(leaflet)
library(dplyr)
library(DT)
install.packages("DT")
library(DT)
runApp('dash/dash.R')
ak_counties <- readOGR("data/tl_2013_02_cousub/tl_2013_02_cousub.shp")
m <- leaflet() %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -149.4937, lat = 64.2008, zoom = 4) %>%
# can then add shape files and play with aesthetics of them
addPolygons(data = ak_counties,
color = "#660000",
weight = 1,              # transparency
smoothFactor = 0.5)      # <1: adding vertices, >1 removing vertices from polygon edges
m
fbi_data <- readRDS(file='data/database.rds')
fbi_tbl <- as.tibble(fbi_data)
fbi_tbl %>%
filter(State == 'Alaska') %>%
mutate(address = paste(City, State, "United States")) ->
ak
addresses <- unique(ak$address)
# then we use the ggmap package - a google maps API package
geocodes <- geocode(addresses, source = "google")
# but this API is weird so have to join datasets, check missing ones, then rerun to get them
addresses_and_coords <- tibble(address = addresses,
lng = geocodes$lon,
lat = geocodes$lat)
counter <- 0
while(sum(is.na(addresses_and_coords$lng)) > 0 && counter < 10){
addresses_and_coords %>%
filter(is.na(lng)) ->
missing_addresses
addresses <- missing_addresses$address
geocodes <- geocode(addresses, source = "google")
addresses_and_coords %>%
filter(is.na(lng)==FALSE) ->
addresses_and_coords
new_addresses <- tibble(address = addresses,
lng = geocodes$lon,
lat = geocodes$lat)
addresses_and_coords <- rbind(addresses_and_coords, new_addresses)
counter <- counter + 1
}
# clean up environment - wouldn't be necessary if above thing was a function
rm(geocodes, addresses, missing_addresses, new_addresses, counter)
# then have to join coords to main tbl
ak <- left_join(ak, addresses_and_coords, by = 'address')
# to make things less stupid, we're adding some noise to the coords - because we only have one coordindate
# for a whole region, so the multiple data points get stacked
ak$lng <- jitter(ak$lng, factor = 1)
ak$lat <- jitter(ak$lat, factor = 1)
# Circle Markers and Coords ----
ak %>%
filter(Crime.Type == 'Murder or Manslaughter') %>%
filter(Crime.Solved == 'No') ->
ak_unsolved
m <- leaflet() %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -149.4937, lat = 64.2008, zoom = 4) %>%
# this polygons step I can't do because of the stupid gdal thing again
#     addPolygons(data = ak_counties,
#                 color = '#660000',
#                 weight = 0.5,
#                 smoothFactor = 1) %>%
addCircleMarkers(lng = ak_unsolved$lng,
lat = ak_unsolved$lat,
color = 'ffffff',
weight = 1,
radius = 5)
m
# labels need to have HTML content to be displayed
# you can create the HTML and store it as a var to paste into for later
ak_unsolved$label <- paste("<p>", ak_unsolved$City, "</p>",
"<p>", ak_unsolved$Month, " ", ak_unsolved$Year, "</p>",
"<p>", ak_unsolved$Victim.Age, "yo", ak_unsolved$Victim.Sex, "</p>",
"<p>", ak_unsolved$Victim.Race, "</p>",
"<p> Weapon:", ak_unsolved$Weapon, "</p>")
m <- leaflet() %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -149.4937, lat = 64.2008, zoom = 4) %>%
addCircleMarkers(lng = ak_unsolved$lng,
lat = ak_unsolved$lat,
color = 'ffffff',
weight = 1,
radius = 5,
label = lapply(ak_unsolved$label, htmltools::HTML)) # needs a char vec of HTML content for the label
m
